<Mood Station 시스템 설계 내용>

Mood Station은 노래 가사를 분석하여 사용자가 원하는 분위기에 맞는 노래를 추천 및 제공하는 시스템입니다. 먼저 Text Analytics API의 여러 기능을 통해 사용자의 음악 재생 목록을 분석합니다. Text Analytics API의 감정 분석 기능을 활용하여 노래 가사에서 긍정적 또는 부정적 감정에 대한 단서를 찾거나, 핵심 문구 추출을 사용하여 텍스트의 주요 개념을 빠르게 식별합니다. 또, 노래 가사의 엔터티를 식별하고 분석합니다. 

사용자의 음악 재생 목록 분석이 끝나면 파이어베이스(Firebase)를 데이터베이스로 사용함으로써 노래에 대한 제목부터 그 노래의 분위기에 맞는 태그, 노래의 장르, 노래의 가사 등과 같이 상황에 맞는 노래 데이터를 저장합니다. 파이어베이스를 선택한 이유는 일정 사용량까지 무료로 제공되는 서비스이며 구글 ID를 사용하면 바로 가입할 수 있어 접근성이 굉장히 용이하기 때문입니다. 또 규칙이 간단하여 사용하기 쉬운 점을 고려하면 제일 적절한 데이터베이스이기 때문입니다. 파이어베이스를 이용하는 방법은 Realtime Database보다 관리가 쉬운 NoSQL 방식으로 저장합니다. 즉, 앞서 수집한 음악들을 바탕으로 하여 각각 아티스트 이름, 타이틀 제목, 노래 가사, 트랙 제목 등등 음악 정보와 관련된 데이터들을 저장하게 됩니다. 이렇게 저장된 데이터들을 바탕으로 해서 파이썬의 텍스트 마이닝 기법을 사용해 우리가 원하는 서비스를 구성하기 위해 필요한 키워드들(장르, 분위기 태그 등)을 추출해냅니다. 추출된 데이터들은 기존에 저장했던 노래의 테이블과는 분리하여 Realtime Database로 저장해 분위기에 맞는 노래를 추천할 데이터로써 사용됩니다. Realtime Database를 사용하는 이유는 음악 수집 API를 통해 수집한 음악 정보와는 달리 저장해야 하는 키워드들이 몇 개 되지 않아 관리가 용이하고 나중에 데이터가 추가되는 일이 있다고 하더라도 기존에 비해 추가되는 양이 그리 크지 않은 데이터이기 때문입니다. 그리고 앨범 사진, 아티스트 사진과 같이 이미지로 구성된 데이터들은 firebase storage를 활용하여 데이터를 저장합니다. 이미지를 업로드한 뒤, 이 이미지가 저장되는 경로를 Realtime Database로 저장하면 연결된 링크 주소를 이용하여 이미지를 가져올 수 있습니다.

데이터 저장 과정이 끝나면 노래 가사에서 분위기를 찾아내야 합니다. 이때 자연어 처리를 활용해야 하는데 한글 자연어 처리를 돕는 도구로서 파이썬 오픈소스 라이브러리의 KoNLPy (코엔엘파이)를 채택했습니다. 한글의 자연어처리 과정에는 형태소 분석이 가장 핵심적입니다. KoNLPy에서는 기존에 C, C++, Java등의 언어를 통해 형태소 분석을 할 수 있는 라이브러리들을 파이썬 라이브러리로 통합해서 제공합니다. KoNLPy는 다양한 형태소 분석기들이 객체 형태로 포함되어 있으며 그 중에 성능이 좋은 편으로 알려진 Okt 형태소 분석기를 활용하여 Mood Station의 설계가 진행됩니다. 노래 가사 자연어 처리 과정으로는 firebase DB에서 자연어 처리를 위한 노래가사를 가져와 Okt에서 제공되는 함수를 통해 텍스트를 형태소 단위로 분류하여 품사 태깅(tagging)을 통해 명사와 형용사, 동사를 구분합니다. 따라서 텍스트를 형태소 단위로 나누어 그에 해당하는 품사와 함께 리스트화 해주는 Pos 함수를 통해 노래 가사의 특정 명사나 형용사, 동사가 들어가는 노래를 태그 할 수 있습니다.

자연어 처리 과정이 끝나면 불용어 제거 단계에 들어갑니다. 불용어란 분석에 큰 의미가 없는 문맥적으로 큰 의미가 없는 단어들을 말합니다. 이런 불용어는 텍스트에 빈번하게 나타나므로 전처리 과정에서 중요한 단어로 인지될 수 있기 때문에 사전에 제거해줘야 합니다. 태그별로 노래들을 나누기 위해서는 DB에서 가져온 가사를 자연어 처리 KoNLPy를 이용하여 전처리 과정이 필요합니다. 전처리된 데이터를 태그별로 쉽게 분류하기 위해서는 필요 없는 단어들을 추가로 제거해줘야 합니다. 한국어의 경우 토큰화 단계에서 조사나, 접속사를 제거하면 됨으로 따로 정해진 불용어가 없지만 필요 없는 명사나 형용사를 제거하기 위해서는 직접 만든 불용어 리스트를 이용하여 제거할 수 있습니다.

불용어 제거 과정까지 마치고 나면 최종적으로 음악의 가사 검색 단계로 들어가게 됩니다. 가사 검색 api로는 Musixmatch Developer를 채택하였습니다. Musixmatch Developer는 웹 사이트나 애플리케이션에서 노래 가사를 표시하는 api이며 62개의 언어를 지원하고 사용자가 노래의 가사를 직접 등록할 수 있는 특징이 있습니다. 첫 번째 호출은 검색 기능을 사용하여 카탈로그와 일치시키는 것이며, 두 번째 호출은 가사를 가져오는 것입니다. 이렇게 사용자의 음악 재생 목록 분석을 통한 노래 추천 서비스가 설계됩니다.
